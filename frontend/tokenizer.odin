package frontend

Token_Kind :: enum {
    Invalid,
    EOF,
    Comment,

    Literal_Begin,
    Ident,
    Integer,
    Float,
    Imag,
    Rune,
    String,
    Literal_End,

    Operator_Begin,
    Eq,
    Not,
    Hash,
    At,
    Dollar,
    Pointer,
    Question,
    Add,
    Sub,
    Mul,
    Quo,   
    Mod,   
    ModMod,
    And,   
    Or,    
    Xor,   
    AndNot,
    Shl,   
    Shr,   
    CmpAnd,
    CmpOr,

    Assign_Op_Begin,
    AddEq,   
    SubEq,   
    MulEq,   
    QuoEq,   
    ModEq,   
    ModModEq,
    AndEq,   
    OrEq,    
    XorEq,   
    AndNotEq,
    ShlEq,   
    ShrEq,   
    CmpAndEq,
    CmpOrEq,
    Assign_Op_End,

    Increment, 
    Decrement, 
    ArrowRight,
    Uninit,
    
    Comparison_Begin,
    Cmp_Eq,
    Not_Eq,
    Lt,   
    Gt,   
    Lt_Eq, 
    Gt_Eq,
    Comparison_End,

    OpenParen,  
    CloseParen, 
    OpenBracket,
    CloseBracket,
    OpenBrace,  
    CloseBrace, 
    Colon,      
    Semicolon,  
    Period,     
    Comma,      
    Ellipsis,   
    Range_Full,  
    Range_Half,  
    Backslash,
    Operator_End,

    Keyword_Begin,
    Import,    
    Foreign,   
    Package,   
    Typeid,    
    When,      
    Where,     
    If,        
    Else,      
    For,       
    Switch,    
    In,        
    Not_in,    
    Do,        
    Case,      
    Break,     
    Continue,  
    Fallthrough,
    Defer,     
    Return,    
    Proc,      
    Struct,    
    Union,     
    Enum,      
    Bit_set,   
    Map,       
    Dynamic,   
    Auto_cast, 
    Cast,      
    Transmute, 
    Distinct,  
    Using,     
    Context,   
    Or_else,   
    Or_return, 
    Asm,       
    Matrix,
    Keyword_End,
}

token_strings := [Token_Kind]string{
    .Invalid            = "Invalid",
    .EOF                = "EOF",
    .Comment            = "Comment",

    .Literal_Begin      = "",
    .Ident              = "identifier",
    .Integer            = "integer",
    .Float              = "float",
    .Imag               = "imaginary",
    .Rune               = "rune",
    .String             = "string",
    .Literal_End        = "",

    .Operator_Begin     = "",
    .Eq                 = "=",
    .Not                = "!",
    .Hash               = "#",
    .At                 = "@",
    .Dollar             = "$",
    .Pointer            = "^",
    .Question           = "?",
    .Add                = "+",
    .Sub                = "-",
    .Mul                = "*",
    .Quo                = "/",   
    .Mod                = "%",   
    .ModMod             = "%%",
    .And                = "&",   
    .Or                 = "|",    
    .Xor                = "~",   
    .AndNot             = "&~",
    .Shl                = "<<",   
    .Shr                = ">>",   
    .CmpAnd             = "&&",
    .CmpOr              = "||",

    .Assign_Op_Begin    = "",
    .AddEq              = "+=",   
    .SubEq              = "-=",   
    .MulEq              = "*=",   
    .QuoEq              = "/=",   
    .ModEq              = "%=",   
    .ModModEq           = "%%=",
    .AndEq              = "&=",   
    .OrEq               = "|=",    
    .XorEq              = "~=",   
    .AndNotEq           = "&~=",
    .ShlEq              = "<<=",   
    .ShrEq              = ">>=",   
    .CmpAndEq           = "&&=",
    .CmpOrEq            = "||=",
    .Assign_Op_End      = "",

    .Increment          = "++", 
    .Decrement          = "--", 
    .ArrowRight         = "-?",
    .Uninit             = "---",
    
    .Comparison_Begin   = "",
    .Cmp_Eq             = "==",
    .Not_Eq             = "!=",
    .Lt                 = "<",   
    .Gt                 = ">",   
    .Lt_Eq              = "<=", 
    .Gt_Eq              = ">=",
    .Comparison_End     = "",

    .OpenParen          = "(",  
    .CloseParen         = ")", 
    .OpenBracket        = "[",
    .CloseBracket       = "]",
    .OpenBrace          = "{",  
    .CloseBrace         = "}", 
    .Colon              = ":",  
    .Semicolon          = ";",  
    .Period             = ".", 
    .Comma              = ",",  
    .Ellipsis           = "..",   
    .Range_Full          = "..=",  
    .Range_Half          = "..<",  
    .Backslash          = "\\",
    .Operator_End       = "",

    .Keyword_Begin      = "",
    .Import             = "import",    
    .Foreign            = "foreign",   
    .Package            = "package",   
    .Typeid             = "typeid",    
    .When               = "when",  
    .Where              = "where", 
    .If                 = "if",  
    .Else               = "else",  
    .For                = "for",  
    .Switch             = "switch",    
    .In                 = "in",  
    .Not_in             = "not_in",    
    .Do                 = "do",
    .Case               = "case",      
    .Break              = "break",     
    .Continue           = "continue",  
    .Fallthrough        = "fallthrough",
    .Defer              = "defer",     
    .Return             = "return",    
    .Proc               = "proc",      
    .Struct             = "struct",    
    .Union              = "union",  
    .Enum               = "enum",   
    .Bit_set            = "bit_set", 
    .Map                = "map",  
    .Dynamic            = "dynamic",  
    .Auto_cast          = "auto_cast", 
    .Cast               = "cast",      
    .Transmute          = "transmute", 
    .Distinct           = "distinct",  
    .Using              = "using",     
    .Context            = "context",   
    .Or_else            = "or_else",   
    .Or_return          = "or_return", 
    .Asm                = "asm",       
    .Matrix             = "matrix",
    .Keyword_End        = "",
}